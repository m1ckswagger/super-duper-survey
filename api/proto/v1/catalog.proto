syntax = "proto3";

package v1;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/m1ckswagger/super-duper-survey/pkg/api/v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Catalog service";
		version: "1.0";
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
};

// Options for one question
message Option {
    // Unique integer identifier of the question
    int64 id = 1;

    // Number of question
    int64 num = 2;

    // Answer text
    string text = 3;
}

// Question in catalog
message Question {
    // Unique integer identifier of the question
    int64 id = 1;
    // Text of the question
    string question = 2;
    // Possible options to choose from
    repeated string options = 3;
}

// Catalogs we manage
message Catalog {
    // Unique integer identifier of the catalog
    int64 id = 1;

    // Title of the catalog
    string title = 2;

    // Description of the catalog
    string description = 3;

    // Date and time when catalog was created
    google.protobuf.Timestamp created = 4;

    // Date and time when catalog was updated
    google.protobuf.Timestamp updated = 5;

    repeated Question questions = 6;
}

// Request data to create a new catalog
message CreateRequest {
    // API versioning
    string api = 1;

    // Catalog entity to add
    Catalog catalog = 2;
}

// Contains data of created catalog
message CreateResponse {
    // API versioning
    string api = 1;

    // ID of created catalog
    int64 id = 2;
}

// Request data to read catalog
message ReadRequest {
    // API versioning
    string api = 1;

    // Unique integer identifer of the catalog
    int64 id = 2;
}

// Contains catalog data specified by ID request
message ReadResponse{
    // API versioning
    string api = 1;

    // Catalog read by ID
    Catalog catalog = 2;
}


// Request data to update catalog
message UpdateRequest {
    // API versioning
    string api = 1;

    // Catalog entity to update
    Catalog catalog = 2;
}

// Contains status of update operation
message UpdateResponse {
    // API versioning
    string api = 1;

    // Number of updated entities
    int64 updated = 2;
}

// Request data to delete catalog
message DeleteRequest {
    // API versioning
    string api = 1;

    // Unique integer identifier of catalog to delete
    int64 id = 2;
}

// Contains status of delete operation
message DeleteResponse {
    // API versioning
    string api = 1;

    // Contains number of entities that have been deleted
    // Equals 1 in case of successful delete
    int64 deleted = 2;
}

// Request data to read all catalogs
message ReadAllRequest {
    // API versioning
    string api = 1;
}

// Contains list of all catalogs
message ReadAllResponse {
    // API versioning
    string api = 1;

    // List of all todo tasks
    repeated Catalog catalogs = 2;
}

// Service to manage list of catalogs
service CatalogService {
    // Create a new catalog
    rpc Create(CreateRequest) returns (CreateResponse) {
        option (google.api.http) = {
            post: "/v1/catalog"
            body: "*"
        };
    }

    // Read a catalog
    rpc Read(ReadRequest) returns (ReadResponse) {
        option (google.api.http) = {
            get: "/v1/catalog/{id}"
        };
    }

    // Update catalog
    rpc Update(UpdateRequest) returns (UpdateResponse) {
        option (google.api.http) = {
            put: "/v1/catalog/{catalog.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/catalog/{catalog.id}"
                body: "*"
            }
        };
    }

    // Delete catalog
    rpc Delete(DeleteRequest) returns (DeleteResponse) {
        option (google.api.http) = {
            delete: "/v1/catalog/{id}"
        };
    }

    // Read all catalogs
    rpc ReadAll(ReadAllRequest) returns (ReadAllResponse) {
        option (google.api.http) = {
            get: "/v1/catalog"
        };
    };
}